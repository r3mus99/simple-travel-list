{"version":3,"sources":["Item.js","ItemButton.js","HiddenSection.js","Section.js","App.js","serviceWorker.js","index.js"],"names":["SingleItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","checkBoxValue","visibility","handleChange","bind","assertThisInitialized","handleVisibility","newValue","setState","onChange","id","onVisibilityChange","visibilityButton","react_default","a","createElement","Visibility_default","VisibilityOff_default","className","Checkbox_default","checked","onClick","disabled","Button_default","label","IconButton_default","aria-label","Component","ItemButton","icon","itemsVisible","KeyboardArrowUp_default","KeyboardArrowDown_default","style","width","fullWidth","HiddenSection","handleClick","buttonDisabled","items","length","map","item","Item","value","src_ItemButton","Section","handleItemVisibilityChange","actualHidden","itemsHidden","actualVisible","toConsumableArray","concat","prevState","filter","h","itemsChecked","handleItemChange","_this$setState","actualItems","defineProperty","_this2","itemsAll","progress","header","LinearProgress_default","variant","color","src_HiddenSection","App","completed","diff","Math","random","min","timer","setInterval","clearInterval","src_Section","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.644fe24e.chunk.js","sourcesContent":["import './App.css';\r\nimport React, { Component } from 'react';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport VisibilityOn from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\n\r\nclass SingleItem extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n    \r\n        this.state = {\r\n            checkBoxValue: false,\r\n            visibility: false\r\n        };\r\n\r\n        // todo refactor\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleVisibility = this.handleVisibility.bind(this);\r\n    }\r\n\r\n    handleChange() {\r\n        const newValue = !this.state.checkBoxValue;\r\n        this.setState({checkBoxValue: newValue});\r\n        this.props.onChange(this.props.id, newValue)\r\n    }\r\n\r\n    handleVisibility() {\r\n        const newValue = !this.state.visibility;\r\n        this.setState({visibility: newValue});\r\n        this.props.onVisibilityChange(this.props.id, newValue);\r\n    }\r\n\r\n    render() {\r\n        let visibilityButton;\r\n        if (this.state.visibility) {\r\n            visibilityButton = <VisibilityOn/>;\r\n        } else {\r\n            visibilityButton = <VisibilityOff/>;\r\n        }\r\n\r\n\r\n        return(\r\n            <div className=\"item\">\r\n                <div className=\"Left\">\r\n                    <Checkbox \r\n                        checked={this.state.checkBoxValue}\r\n                        onClick={this.handleChange}\r\n                        disabled={this.state.visibility}/>\r\n                    <Button \r\n                        onClick={this.handleChange}\r\n                        disabled={this.state.visibility}>\r\n                        {this.props.label}\r\n                    </Button>\r\n                </div>\r\n                <div className=\"Right\">\r\n                    <IconButton aria-label=\"hide\" className=\"grayIcon\"\r\n                        onClick={this.handleVisibility}>\r\n                        {visibilityButton}\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SingleItem;","import './App.css';\r\nimport React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconDown from '@material-ui/icons/KeyboardArrowDown';\r\nimport IconUp from '@material-ui/icons/KeyboardArrowUp';\r\n\r\nclass ItemButton extends Component {\r\n\r\n    render() {\r\n        const icon = this.props.itemsVisible && !this.props.disabled\r\n            ? <IconUp/>\r\n            : <IconDown/>;\r\n\r\n        return(\r\n            <div style={{width: \"auto\"}}>\r\n                <Button \r\n                    fullWidth disabled={this.props.disabled}\r\n                    onClick={this.props.onClick}>\r\n                    {icon}\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default ItemButton;","import './App.css';\r\nimport Item from './Item';\r\nimport React, { Component } from 'react';\r\nimport ItemButton from './ItemButton';\r\n\r\nclass HiddenSection extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            itemsVisible: false\r\n        }\r\n    }\r\n\r\n    handleClick = () => {\r\n        const newValue = !this.state.itemsVisible;\r\n        // alert(\"i am handling click\")\r\n        this.setState({itemsVisible: newValue});\r\n    }\r\n\r\n    render() {\r\n        const buttonDisabled = this.props.items.length === 0;\r\n        const items = this.state.itemsVisible \r\n            ? this.props.items.map(item => {\r\n                return (\r\n                    <Item \r\n                        label={item}\r\n                        id={item} /* todo refactor */\r\n                        onChange={(item, value) => {}}\r\n                        onVisibilityChange={(item, value) => {}}\r\n                        /* value={this.state[item]}*/\r\n                    />\r\n                )\r\n            })\r\n            : null;\r\n\r\n        return(\r\n            <div>\r\n                <ItemButton \r\n                    itemsVisible={this.state.itemsVisible}\r\n                    disabled={buttonDisabled}\r\n                    onClick={this.handleClick}/>\r\n                { items }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HiddenSection;","import './App.css';\r\nimport React, { Component } from 'react';\r\nimport Item from './Item';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport HiddenSection from './HiddenSection';\r\n\r\nclass Section extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            itemsChecked: 0,\r\n\r\n            itemsHidden: [],\r\n            itemsVisible: this.props.items.filter((item) => item !== \"ColoredLine\"),\r\n        };\r\n\r\n        this.handleItemChange = this.handleItemChange.bind(this);\r\n    }\r\n\r\n    handleItemChange(item, value) {\r\n        var actualItems = this.state.itemsChecked;\r\n        if (value) {\r\n            actualItems++;\r\n        } else {\r\n            actualItems--;\r\n        }\r\n\r\n        this.setState({ \r\n            [item]: value,\r\n            itemsChecked: actualItems \r\n        });\r\n    }\r\n\r\n    handleItemVisibilityChange = (item, value) => {\r\n        var actualHidden = this.state.itemsHidden;\r\n        var actualVisible = this.state.itemsVisible;\r\n\r\n        if (value) {\r\n            // add item to hidden array\r\n            this.setState({ \r\n                itemsHidden: [ ...actualHidden, item] \r\n            });\r\n            this.setState(prevState => ({ \r\n                itemsVisible: prevState.itemsVisible.filter(h => h !== item) \r\n            }));\r\n        } else {\r\n            this.setState({ \r\n                itemsVisible: [ ...actualVisible, item] \r\n            });\r\n            // remove item from hidden array\r\n            this.setState(prevState => ({ \r\n                itemsHidden: prevState.itemsHidden.filter(h => h !== item) \r\n            }));\r\n        }\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const items = this.props.items.map(item => {\r\n            if (item === \"ColoredLine\") {\r\n                return (<hr/>);\r\n            } else {\r\n                return (\r\n                    <Item \r\n                        label={item}\r\n                        id={item} /* todo refactor */\r\n                        onChange={this.handleItemChange}\r\n                        onVisibilityChange={this.handleItemVisibilityChange}\r\n                        value={this.state[item]}\r\n                    />\r\n                )\r\n            }\r\n        });\r\n\r\n        const itemsAll = this.state.itemsVisible.length;\r\n        const itemsChecked = this.state.itemsChecked;\r\n        const progress = (itemsChecked / itemsAll) * 100;\r\n\r\n        return(\r\n            <div className=\"Section\">\r\n                <div className=\"Header\">\r\n                    <div className=\"Left\">\r\n                        <p>{this.props.header}</p>\r\n                    </div>\r\n                    <div className=\"Right\">\r\n                        <p>{itemsChecked}/{itemsAll}</p>\r\n                    </div>\r\n                </div>\r\n                {items}\r\n                {/* <div>{JSON.stringify(this.state)}</div> */}\r\n                <LinearProgress variant=\"determinate\" color=\"secondary\" value={progress} />\r\n                {/* <HiddenSection items={this.state.itemsVisible}/> */}\r\n                <HiddenSection items={this.state.itemsHidden}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Section;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Section from './Section';\r\n\r\nclass App extends Component {\r\n  \r\n  state = {\r\n    completed: 0,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.timer = setInterval(this.progress, 500);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n  }\r\n\r\n  progress = () => {\r\n    const { completed } = this.state;\r\n    if (completed === 100) {\r\n      // this.setState({ completed: 0 });\r\n    } else {\r\n      const diff = Math.random() * 10;\r\n      this.setState({ completed: Math.min(completed + diff, 100) });\r\n    }\r\n  };\r\n  \r\n  render() {\r\n\r\n    // todo replace with map\r\n    const itemsMain = [\r\n      \"peniaze a platobná karta\",\r\n      \"občianský preukaz\",\r\n      \"vodičský preukaz\",\r\n      \"cestovný pas\",\r\n      \"kartička cestovného poistenia\",\r\n      \"kartička zdravotného poistenia\",\r\n      \"dokumenty od cestovnej kancelárie\",\r\n      \"ColoredLine\",\r\n      \"lieky, ktoré beriem\",\r\n      \"lieky, ktoré by sa mohli hodiť\",\r\n      \"ColoredLine\",\r\n      \"okuliare\",\r\n      \"telefón (+ nabíjačka)\",\r\n      \"zámky na batožinu (+ kľúče)\"\r\n    ]\r\n\r\n    const itemsClothes = [\r\n      \"košele\",\r\n      \"nohavice\",\r\n      \"oblek a kravata\",\r\n      \"plavky\"\r\n    ]\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <LinearProgress color=\"secondary\" variant=\"determinate\" value={this.state.completed} />\r\n\r\n        <Section header=\"Hlavné\" items={itemsMain}/>\r\n        <Section header=\"Oblečenie\" items={itemsClothes}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}