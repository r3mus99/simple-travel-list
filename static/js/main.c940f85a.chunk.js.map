{"version":3,"sources":["Item.js","App.js","serviceWorker.js","index.js"],"names":["SingleItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","checkBoxValue","visibility","handleChange","bind","assertThisInitialized","handleVisibility","setState","visibilityButton","react_default","a","createElement","Visibility_default","VisibilityOff_default","className","Checkbox_default","checked","onClick","disabled","Button_default","label","IconButton_default","aria-label","Component","App","ColoredLine","_ref","color","style","backgroundColor","height","Item","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2RA4DeA,cAlDX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTC,eAAe,EACfC,YAAY,GAIhBT,EAAKU,aAAeV,EAAKU,aAAaC,KAAlBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACpBA,EAAKa,iBAAmBb,EAAKa,iBAAiBF,KAAtBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAVVA,8EAcdG,KAAKW,SAAS,CAACN,eAAgBL,KAAKI,MAAMC,2DAI1CL,KAAKW,SAAS,CAACL,YAAaN,KAAKI,MAAME,8CAIvC,IAAIM,EAOJ,OALIA,EADAZ,KAAKI,MAAME,WACQO,EAAAC,EAAAC,cAACC,EAAAF,EAAD,MAEAD,EAAAC,EAAAC,cAACE,EAAAH,EAAD,MAInBD,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACXL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CACIM,QAASpB,KAAKI,MAAMC,cACpBgB,QAASrB,KAAKO,aACde,SAAUtB,KAAKI,MAAME,aACzBO,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CACIO,QAASrB,KAAKO,aACde,SAAUtB,KAAKI,MAAME,YACpBN,KAAKJ,MAAM4B,OAEhBX,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CAAYY,aAAW,OAAOR,UAAU,WACpCG,QAASrB,KAAKU,kBACbE,WA5CIe,aCyCVC,mLAzCX,IAAMC,EAAc,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAH,OAClBlB,EAAAC,EAAAC,cAAA,MACIiB,MAAO,CACHD,MAAOA,EACPE,gBAAiBF,EACjBG,OAAQ,MAKlB,OACErB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WACbL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,WAAb,aACAL,EAAAC,EAAAC,cAACoB,EAAD,CAAMX,MAAM,gCACZX,EAAAC,EAAAC,cAACoB,EAAD,CAAMX,MAAM,8BACZX,EAAAC,EAAAC,cAACoB,EAAD,CAAMX,MAAM,6BACZX,EAAAC,EAAAC,cAACoB,EAAD,CAAMX,MAAM,oBACZX,EAAAC,EAAAC,cAACoB,EAAD,CAAMX,MAAM,0CACZX,EAAAC,EAAAC,cAACoB,EAAD,CAAMX,MAAM,2CACZX,EAAAC,EAAAC,cAACoB,EAAD,CAAMX,MAAM,yCACZX,EAAAC,EAAAC,cAACc,EAAD,CAAaE,MAAM,cACnBlB,EAAAC,EAAAC,cAACoB,EAAD,CAAMX,MAAM,2BACZX,EAAAC,EAAAC,cAACoB,EAAD,CAAMX,MAAM,2CACZX,EAAAC,EAAAC,cAACc,EAAD,CAAaE,MAAM,cACnBlB,EAAAC,EAAAC,cAACoB,EAAD,CAAMX,MAAM,aACZX,EAAAC,EAAAC,cAACoB,EAAD,CAAMX,MAAM,qCACZX,EAAAC,EAAAC,cAACoB,EAAD,CAAMX,MAAM,sDAEdX,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WACbL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,WAAb,kBACAL,EAAAC,EAAAC,cAACoB,EAAD,CAAMX,MAAM,gBACZX,EAAAC,EAAAC,cAACoB,EAAD,CAAMX,MAAM,aACZX,EAAAC,EAAAC,cAACoB,EAAD,CAAMX,MAAM,oBACZX,EAAAC,EAAAC,cAACoB,EAAD,CAAMX,MAAM,oBAtCJG,aCQES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c940f85a.chunk.js","sourcesContent":["import './App.css';\r\nimport React, { Component } from 'react';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport VisibilityOn from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\n\r\nclass SingleItem extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n    \r\n        this.state = {\r\n            checkBoxValue: false,\r\n            visibility: false\r\n        };\r\n    \r\n        // todo refactor\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleVisibility = this.handleVisibility.bind(this);\r\n    }\r\n\r\n    handleChange() {\r\n        this.setState({checkBoxValue: !this.state.checkBoxValue});\r\n    }\r\n\r\n    handleVisibility() {\r\n        this.setState({visibility: !this.state.visibility});\r\n    }\r\n\r\n    render() {\r\n        let visibilityButton;\r\n        if (this.state.visibility) {\r\n            visibilityButton = <VisibilityOn/>;\r\n        } else {\r\n            visibilityButton = <VisibilityOff/>;\r\n        }\r\n\r\n        return(\r\n            <div className=\"item\">\r\n                <Checkbox \r\n                    checked={this.state.checkBoxValue}\r\n                    onClick={this.handleChange}\r\n                    disabled={this.state.visibility}/>\r\n                <Button \r\n                    onClick={this.handleChange}\r\n                    disabled={this.state.visibility}>\r\n                    {this.props.label}\r\n                </Button>\r\n                <IconButton aria-label=\"hide\" className=\"grayIcon\"\r\n                    onClick={this.handleVisibility}>\r\n                    {visibilityButton}\r\n                </IconButton>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SingleItem;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Item from './Item';\r\n\r\nclass App extends Component {\r\n  render() {\r\n\r\n    // todo refactor\r\n    const ColoredLine = ({ color }) => (\r\n      <hr\r\n          style={{\r\n              color: color,\r\n              backgroundColor: color,\r\n              height: 1\r\n          }}\r\n      />\r\n    );\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"Section\">\r\n          <p className=\"Header1\">Hlavné</p>\r\n          <Item label=\"peniaze a platobná karta\"/>\r\n          <Item label=\"občianský preukaz\"/>\r\n          <Item label=\"vodičský preukaz\"/>\r\n          <Item label=\"cestovný pas\"/>\r\n          <Item label=\"kartička cestovného poistenia\"/>\r\n          <Item label=\"kartička zdravotného poistenia\"/>\r\n          <Item label=\"dokumenty od cestovnej kancelárie\"/>\r\n          <ColoredLine color=\"gainsboro\" />\r\n          <Item label=\"lieky, ktoré beriem\"/>\r\n          <Item label=\"lieky, ktoré by sa mohli hodiť\"/>\r\n          <ColoredLine color=\"gainsboro\" />\r\n          <Item label=\"okuliare\"/>\r\n          <Item label=\"telefón (+ nabíjačka)\"/>\r\n          <Item label=\"zámky na batožinu (+ kľúče)\"/>\r\n        </div>\r\n        <div className=\"Section\">\r\n          <p className=\"Header1\">Oblečenie</p>\r\n          <Item label=\"košele\"/>\r\n          <Item label=\"nohavice\"/>\r\n          <Item label=\"oblek a kravata\"/>\r\n          <Item label=\"plavky\"/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}